generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum FriendRequestState {
  PENDING
  ACCEPTED
  DECLINED
}

enum ChannelType {
  TEXT
  RULES
  ANNOUNCEMENTS
}

model users {
  id Int @id @default(autoincrement())
  token String @unique @default(uuid())
  username String @unique
  displayName String
  email String @unique
  password String?
  imageUrl String?
  createdAt DateTime @default(now())
  servers servers[] @relation("Participants")
  ownedServers servers[] @relation("Owner")
  bannedServers servers[] @relation("BannedUsers")
  eligibleChannels channels[] @relation("EligibleUsers")
  dms dms[] @relation("DmUsers")
  friends users[] @relation("Friends")
  friendsOf users[] @relation("Friends")
  messages messages[]
  sentFriendRequests friend_requests[] @relation("SentFriendRequests")
  receivedFriendRequests friend_requests[] @relation("ReceivedFriendRequests")
}

model servers {
  id Int @id @default(autoincrement())
  name String
  participants users[] @relation("Participants")
  ownerId Int
  owner users @relation("Owner",fields: [ownerId], references: [id])
  channels channels[] @relation("Channels")
  defaultChannelId Int @unique
  defaultChannel channels @relation("DefaultChannel", fields: [defaultChannelId], references: [id])
  rulesChannelId Int? @unique
  rulesChannel channels? @relation("RulesChannel", fields: [rulesChannelId], references: [id])
  imageUrl String?
  bannerUrl String?
  bannedUsers users[] @relation("BannedUsers")
}

model channels {
  id Int @id @default(autoincrement())
  name String
  type ChannelType
  messages messages[]
  eligibleUsers users[] @relation("EligibleUsers")
  serverId Int @unique
  server servers @relation("Channels", fields: [serverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  defaultChannelOf servers? @relation("DefaultChannel")
  rulesChannelOf servers? @relation("RulesChannel")
}

model dms {
  id Int @id @default(autoincrement())
  userIds Int[]
  users users[] @relation("DmUsers")
  messages messages[]
  imageUrl String?
}

model messages {
  id Int @id @default(autoincrement())
  content String
  channelId Int?
  channel channels? @relation(fields: [channelId], references: [id])
  dmId Int?
  dm dms? @relation(fields: [dmId], references: [id])
  authorId Int
  author users @relation(fields: [authorId], references: [id])
  sentAt DateTime
}

model friend_requests {
  id Int @id @default(autoincrement())
  sentById Int
  sentBy users @relation("SentFriendRequests", fields: [sentById], references: [id], onDelete: Cascade)
  sentToId Int
  sentTo users @relation("ReceivedFriendRequests", fields: [sentToId], references: [id], onDelete: Cascade)
  state FriendRequestState
}